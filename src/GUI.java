import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.Barcode39;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfDictionary;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfNumber;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableColumn;
import com.itextpdf.text.pdf.PdfPTable;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import javax.swing.filechooser.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.Stack;
import javax.swing.AbstractCellEditor;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
/*
* Class: GUI
* @author: Sean Bailey
* Date Created: 5/14/2012
* Date Modified: 5/18/2012
* Purpose: Contains all logic for the barcode scanner app. Bad practice but the app is so small it really
* doesn't make that much of a difference.
* 
*/
 
public class GUI extends javax.swing.JFrame {
    private static final int PACK_SIZE = 20;                //max number of elements that will fit on a label
    private static final String FILE_EXTENSION = ".lbl";    //default file extension for the data save files
    private int labelSize = PACK_SIZE;                      //number of rows the label input table contains
    private Stack longBarcodes = new Stack<Object>();       //*unused* intended for document rotation of long barcodes
    private static final String HINT_TEXT = "Invoice , PO, Customer";   //the 'hint' text that shows up on launch in the title field.
    
    
    
    /** Creates new form GUI */
    public GUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        serialNumbers_table = new javax.swing.JTable();
        header_panel = new javax.swing.JPanel();
        labelTitle_lbl = new javax.swing.JLabel();
        label_title_tf = new javax.swing.JTextField();
        headerNumber_lbl = new javax.swing.JLabel();
        header_number_tf = new javax.swing.JTextField();
        unitsPerCase_lbl = new javax.swing.JLabel();
        unitsPerCase_tf = new javax.swing.JTextField();
        footer_panel = new javax.swing.JPanel();
        clear_btn = new javax.swing.JButton();
        printLabel_btn = new javax.swing.JButton();
        newLabel_btn = new javax.swing.JButton();
        open_btn = new javax.swing.JButton();
        display_panel = new javax.swing.JPanel();
        serial_lbl = new javax.swing.JLabel();
        serialEntry_tf = new javax.swing.JTextField();
        serialAdd_btn = new javax.swing.JButton();
        count_lbl = new javax.swing.JLabel();
        count_lbl_data = new javax.swing.JLabel();
        serialsContainer_sp = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        file_menu = new javax.swing.JMenu();
        newLabel_menuItem = new javax.swing.JMenuItem();
        open_menuItem = new javax.swing.JMenuItem();
        print_menu_item = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Packing Label Creator");
        setMinimumSize(new java.awt.Dimension(600, 750));
        setName("Hard drive packing label creator"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        serialNumbers_table.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        serialNumbers_table.setFont(new java.awt.Font("Monospaced", 0, 36)); // NOI18N
        serialNumbers_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Serial Numbers"
            }
        ));
        serialNumbers_table.setToolTipText("Scan in serial numbers here.");
        serialNumbers_table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        serialNumbers_table.setCellSelectionEnabled(true);
        serialNumbers_table.setDragEnabled(true);
        serialNumbers_table.setGridColor(new java.awt.Color(0, 0, 0));
        serialNumbers_table.setRowHeight(28);
        serialNumbers_table.setSelectionBackground(new java.awt.Color(0, 204, 204));
        serialNumbers_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        serialNumbers_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serialNumbers_tableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                serialNumbers_tableMousePressed(evt);
            }
        });
        serialNumbers_table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                serialNumbers_tableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(serialNumbers_table);

        labelTitle_lbl.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelTitle_lbl.setText("Title:");
        labelTitle_lbl.setToolTipText("Label Title: Invoice, PO, Customer");

        label_title_tf.setFont(new java.awt.Font("DialogInput", 0, 20)); // NOI18N
        label_title_tf.setText("Invoice, PO, Customer");
        label_title_tf.setToolTipText("Invoice, PO, Customer");
        label_title_tf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_title_tfMouseClicked(evt);
            }
        });
        label_title_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                label_title_tfKeyPressed(evt);
            }
        });

        headerNumber_lbl.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        headerNumber_lbl.setText("Model Number:");
        headerNumber_lbl.setToolTipText("Model number");

        header_number_tf.setFont(new java.awt.Font("DialogInput", 0, 20)); // NOI18N
        header_number_tf.setToolTipText("Model number");
        header_number_tf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                header_number_tfMouseClicked(evt);
            }
        });
        header_number_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                header_number_tfKeyPressed(evt);
            }
        });

        unitsPerCase_lbl.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        unitsPerCase_lbl.setText("Units per box:");
        unitsPerCase_lbl.setToolTipText("Max number of units in a box.");

        unitsPerCase_tf.setFont(new java.awt.Font("DialogInput", 0, 20)); // NOI18N
        unitsPerCase_tf.setText("20");
        unitsPerCase_tf.setToolTipText("Max number of units in a box.");
        unitsPerCase_tf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unitsPerCase_tfMouseClicked(evt);
            }
        });
        unitsPerCase_tf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                unitsPerCase_tfFocusLost(evt);
            }
        });
        unitsPerCase_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                unitsPerCase_tfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                unitsPerCase_tfKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout header_panelLayout = new javax.swing.GroupLayout(header_panel);
        header_panel.setLayout(header_panelLayout);
        header_panelLayout.setHorizontalGroup(
            header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(header_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, header_panelLayout.createSequentialGroup()
                        .addComponent(labelTitle_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_title_tf))
                    .addGroup(header_panelLayout.createSequentialGroup()
                        .addComponent(headerNumber_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(header_number_tf))
                    .addGroup(header_panelLayout.createSequentialGroup()
                        .addComponent(unitsPerCase_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unitsPerCase_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        header_panelLayout.setVerticalGroup(
            header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(header_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_title_tf)
                    .addComponent(labelTitle_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headerNumber_lbl)
                    .addComponent(header_number_tf))
                .addGap(8, 8, 8)
                .addGroup(header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitsPerCase_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitsPerCase_lbl)))
        );

        header_panelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {header_number_tf, label_title_tf, unitsPerCase_tf});

        clear_btn.setText("clear serials");
        clear_btn.setToolTipText("Clear all serial numbers from the table.");
        clear_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_btnActionPerformed(evt);
            }
        });

        printLabel_btn.setText("save & print");
        printLabel_btn.setToolTipText("Saves pdf and opens file");
        printLabel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printLabel_btnActionPerformed(evt);
            }
        });

        newLabel_btn.setText("new label");
        newLabel_btn.setToolTipText("Clears all fields for a new label.");
        newLabel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLabel_btnActionPerformed(evt);
            }
        });

        open_btn.setText("open label");
        open_btn.setToolTipText("Opens a label file.");
        open_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout footer_panelLayout = new javax.swing.GroupLayout(footer_panel);
        footer_panel.setLayout(footer_panelLayout);
        footer_panelLayout.setHorizontalGroup(
            footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footer_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(open_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newLabel_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clear_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(printLabel_btn)
                .addContainerGap())
        );
        footer_panelLayout.setVerticalGroup(
            footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footer_panelLayout.createSequentialGroup()
                .addGroup(footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(printLabel_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clear_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newLabel_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(open_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 2, Short.MAX_VALUE))
        );

        serial_lbl.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        serial_lbl.setText("Serial #:");

        serialEntry_tf.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        serialEntry_tf.setText("Click here and scan.");
        serialEntry_tf.setToolTipText("Scan serial numbers in here and press enter.");
        serialEntry_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialEntry_tfActionPerformed(evt);
            }
        });

        serialAdd_btn.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        serialAdd_btn.setText("Add");
        serialAdd_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialAdd_btnActionPerformed(evt);
            }
        });

        count_lbl.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        count_lbl.setText("Serial Count:");

        count_lbl_data.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        count_lbl_data.setText("0");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Box Count:");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setText("0");

        javax.swing.GroupLayout display_panelLayout = new javax.swing.GroupLayout(display_panel);
        display_panel.setLayout(display_panelLayout);
        display_panelLayout.setHorizontalGroup(
            display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(display_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(display_panelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(serial_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serialEntry_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serialAdd_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(display_panelLayout.createSequentialGroup()
                        .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(count_lbl)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(count_lbl_data))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serialsContainer_sp, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                .addContainerGap())
        );
        display_panelLayout.setVerticalGroup(
            display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(display_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serialsContainer_sp, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addGroup(display_panelLayout.createSequentialGroup()
                        .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(serial_lbl)
                                .addComponent(serialEntry_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(serialAdd_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(count_lbl)
                            .addComponent(count_lbl_data))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addContainerGap())))
        );

        file_menu.setText("File");

        newLabel_menuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newLabel_menuItem.setText("New Label");
        newLabel_menuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLabel_menuItemActionPerformed(evt);
            }
        });
        file_menu.add(newLabel_menuItem);

        open_menuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open_menuItem.setText("Open");
        open_menuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_menuItemActionPerformed(evt);
            }
        });
        file_menu.add(open_menuItem);

        print_menu_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        print_menu_item.setText("Print");
        print_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_menu_itemActionPerformed(evt);
            }
        });
        file_menu.add(print_menu_item);

        menuBar.add(file_menu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(footer_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(header_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(display_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(jScrollPane1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(header_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(display_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(footer_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * Function: focusTf
     * Purpose: sets the focus on the label title text field on window load and every time 
     * new label is called and also repopulates the default 'hint' text
     */
    public void focusTf(){
        this.label_title_tf.requestFocusInWindow();
        this.label_title_tf.setText(HINT_TEXT);
        this.label_title_tf.selectAll();
    }
    
/*
 * Function: clear_btnActionPerformed
 * Purpose: clears the JTable that holds the serial numbers. One at a time, and sets the focus
 * back at the first row ready for input once again.
 * @param: actionEvent evt
 */
private void clear_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_btnActionPerformed
    int rows = this.serialNumbers_table.getRowCount();
    
    for(int i = 0; i < rows; i++){
        this.serialNumbers_table.setValueAt("", i, 0);
    }
    
    //Reset the number of rows in the table to the default number PACK_SIZE
    DefaultTableModel tm = (DefaultTableModel)serialNumbers_table.getModel();
    tm.setNumRows(PACK_SIZE);
    labelSize = PACK_SIZE;
     
    this.serialNumbers_table.requestFocusInWindow();
    this.serialNumbers_table.setColumnSelectionInterval(0,0);
    this.serialNumbers_table.setRowSelectionInterval(0,0);
    
    //scroll to top row
    this.serialNumbers_table.scrollRectToVisible(new java.awt.Rectangle(0, 0));
}//GEN-LAST:event_clear_btnActionPerformed

/*
 * Function: manipulatePdf
 * Purpose: *unused* Rotates the pdf by 90 degrees after writing; intended for use with
 * long barcode handling.
 * @param: String src: the source pdf file to rotate
 * @param: String dest: the destination pdf file to save rotation.
 */
 public void manipulatePdf(String src, String dest) throws IOException, DocumentException {
        PdfReader reader = new PdfReader(src);
        int n = reader.getNumberOfPages();
        int rot;
        PdfDictionary pageDict;
        for (int i = 1; i <= n; i++) {
            rot = reader.getPageRotation(i);
            pageDict = reader.getPageN(i);
            pageDict.put(PdfName.ROTATE, new PdfNumber(rot + 90));
        }
        PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(dest));
        stamper.close();
 }

 /*
  * Function: scaleBarcode
  * Purpose: creates a barcode image given a string. The image is scaled if the string length
  * is longer than 17 characters; which seems to be the max number of characters that fit on a 
  * 4x6 label.
  * @param: String code: the string you want to convert to a barcode image
  * @param: PdfWriter writer: reference to a writer which is needed to created the image
  * @returns: itext.text.Image image of the barcode
  */
 public com.itextpdf.text.Image scaleBarcode(String code, PdfWriter writer){
    Barcode39 code39 = new Barcode39();
    code39.setSize(6f);     //sets font size of text below the barcode
    code39.setBarHeight(8); //sets the height of the bars for the barcode
    code39.setX(1);         //sets the min width of the bars
    
    code39.setCode(code);   //binds the input string to the Barcode39 object's code
    PdfContentByte cb = writer.getDirectContent();  //required to create the image
    com.itextpdf.text.Image tehImage = code39.createImageWithBarcode(cb, null, null); //itext Image object of the barcode
    
    //image scaling logic; limited to 17 characters unscaled by 4x6. 37 characters max scalable 
    if(code.length() > 17){
        tehImage.scaleAbsoluteWidth(270);
    }
    return tehImage;
 }
 
 /*
  * Function: initTable
  * Purpose: Initializes the pdf table that holds the serial numbers. Is called for each 'page' 
  * of the pdf.
  * @param: int size - the number of columns in the table
  * @returns: PdfPTable with the given number of columns and column widths
  */
 public PdfPTable initTable(int size){
        PdfPTable table = new PdfPTable(size);  //creates table object and sets number of columns
       
        float dims [] = new float [2];          //the array to hold the column widths
        dims[0] = .2f;                          //hard coded first column width; item number
        dims[1] = 4f;                           //hard coded barcode column width
        table = new PdfPTable(dims);            //creates the table with the new column widths
        table.setWidthPercentage(100);          //sets the width of the table to the width of the page
        return table;
 }
  
  /*
  * Function: addHeader
  * Purpose: Adds the header of the label that contains label title, model number, and the case number.
  * @param: Document document - reference to the current document being written to.
  * @param: PdfWriter writer - reference to the current writer writing to the pdf.
  * @param: int caseNumber - the current 'box' the label is on
  * @param: int numberOfCases - the max number of 'boxes' 
  */
  public void addHeader(Document document, PdfWriter writer, int caseNumber, int numberOfCases) throws DocumentException{
        String title1 = this.label_title_tf.getText().toUpperCase();        //sends to uppercase in case conversion to barcode is needed
        String headerNumber = this.header_number_tf.getText().toUpperCase();
        
        //label title object
        Paragraph labelTitle;
          
        //scaling logic for the title to prevent wrapping and offsetting the number of elements on a label
        if(title1.length() < 32)
             labelTitle= new Paragraph(title1,new Font(FontFamily.COURIER,15));
        else if (title1.length() < 39){
            labelTitle= new Paragraph(title1,new Font(FontFamily.COURIER,12));
        } else if(title1.length() < 59) {
            labelTitle= new Paragraph(title1,new Font(FontFamily.COURIER,8));
        } else {
            labelTitle= new Paragraph(title1,new Font(FontFamily.COURIER,5));
        }
        
        //table object holding the title to hold the barcode
        PdfPTable titleTable = new PdfPTable(1);
        
        //sets table to the width of the page
        titleTable.setWidthPercentage(100f);
        
        labelTitle.setAlignment(Element.ALIGN_CENTER);
        
        //logic to convert label title to a barcode
        /*
            com.itextpdf.text.Image barcode = scaleBarcode(title1,writer);
            barcode.setAlignment(com.itextpdf.text.Image.ALIGN_CENTER);
            barcode.setWidthPercentage(100);
            PdfPCell titleCell = new PdfPCell(barcode);
            titleCell.setBorder(0);
            titleCell.setPaddingTop(3f);
            titleCell.setHorizontalAlignment(PdfPCell.ALIGN_CENTER);
            titleTable.addCell(titleCell);
            document.add(titleTable);
         */
        
        //adds the label title to the document object
        document.add(labelTitle);
        
        //table object that holds header and case text
        PdfPTable table = new PdfPTable(new float[] {5f, 2f});
        table.setWidthPercentage(100);
        PdfPCell cell = new PdfPCell();
        
        //Label Header Number
        Paragraph labelHeaderNumber = new Paragraph(headerNumber,new Font(FontFamily.HELVETICA,12));
        labelHeaderNumber.setAlignment(Element.ALIGN_LEFT);
        cell = new PdfPCell(labelHeaderNumber);
        //document.add(labelHeaderNumber);
        /*
        if(headerNumber.equals(""))
            cell = new PdfPCell();
        else{
            barcode = scaleBarcode(headerNumber,writer);
            if(headerNumber.length() > 12)
                barcode.scaleAbsoluteWidth(180);
            cell = new PdfPCell(barcode);
            cell.setHorizontalAlignment(PdfPCell.ALIGN_LEFT);
            cell.setPaddingTop(4f);
            
        }
         */
        cell.setBorder(0);  //remove cell border
        table.addCell(cell);//adds the title cell to the table object
        
        //object to hold current box of max boxes text
         Paragraph caseNumberLabel = new Paragraph("Box: " + caseNumber + " of " + numberOfCases,new Font(FontFamily.HELVETICA,12));
         
         //set text alignment to the right of the cell
         caseNumberLabel.setAlignment(Element.ALIGN_RIGHT);
         
         //puts the object text into a PdfPCell object
         cell = new PdfPCell(caseNumberLabel);
         cell.setBorder(0); //remove cell border
         table.addCell(cell);   //add the cell to the table object
        
        document.add(table);    //add table to the document 
        
        //paragraph object that holds 'Serial Numbers' label for the table
        Paragraph serials = new Paragraph("      Serial Numbers:", new Font(FontFamily.HELVETICA,8));
        
        //adds serial numbers label to the document
        document.add(serials);
    }
 
/*
* Function: findData()
* Purpose: checks to see if the serials number table object has any data in the table rows.
* @returns true - at the first non-null/empty value in the table
* @returns false - if it goes through the whole table and finds nothing.
*/
private boolean findData(){
     for(int i = 0; i < serialNumbers_table.getRowCount(); i++){
         try{
           Object obj_value = this.serialNumbers_table.getValueAt(i, 0);
            String value = obj_value.toString();
            //if you find data in the table then return true
            if(!value.trim().equals("")) 
                return true;
         } catch (NullPointerException npe) {
             continue;
         }
     }
     //else the table is empty and return false
     return false;
 }
 
 /*
 * Function: generateLongPDF
 * Purpose: *unused* Generates a pdf file that interchanges the height and width dimensions and then
 * calls the manipulatePDF function to rotate the file so that it prints in a landscape format.
 * @param int counter - the number of items that have already been printed to a label; default is 1
 */
 private void generateLongPDF(int counter){
     if(!(longBarcodes.size() <= 0)){
         try{
            Rectangle pageSize = new Rectangle(600,400);
            Document document = new Document(pageSize, 7.5f, 7.5f,0f,0f);
            // step 2
            PdfWriter writer;
            writer = PdfWriter.getInstance(document, new FileOutputStream("packingListLong.pdf"));
            
            document.open();
            
            PdfContentByte cb = writer.getDirectContent();
            document.add(new Paragraph("Hi"));
            //add title and header
            //addHeader(document,0,1);
        
            //set data table
            PdfPTable table = initTable(3);


            PdfPCell cell = new PdfPCell();
            cell.setFixedHeight(1f);
            cell.setPaddingTop(1f);
            
            for(int i = 0; i < longBarcodes.size(); i++, counter++){
                //add count
                cell = new PdfPCell(new Paragraph(""+counter, new Font(Font.FontFamily.HELVETICA, 6)));
                cell.setBorder(0);
                cell.setPaddingTop(1f);
                //cell.setPaddingBottom(6f);
                table.addCell(cell);
                
                //add barcode
                cell = new PdfPCell((Image)longBarcodes.pop());
                cell.setBorder(0);
                cell.setPaddingTop(1f);
                //cell.setPaddingBottom(0f);
                table.addCell(cell);
            }
            document.add(table);
            document.close();
         } catch (DocumentException de) {
             System.out.println(de);
         } catch (FileNotFoundException fnf) {
             System.out.println(fnf);
         }
     }
 }
 
 /*
  * Function: saveDataText
  * Purpose: Saves the label data to a text file using the FILE_EXTENSION and as a csv file
  */
 private void saveDataText(){
     String fileName;       //stores FILE_EXTENSION name
     String fileNameCSV;    //stores CSV name
     fileName = resolveFileName(FILE_EXTENSION);    //resolves the path to the FILE_EXTENSION file
     fileNameCSV = resolveFileName(".csv");         //resolves the path to the csv file
     
     try{
         
        BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));   //writer object that writes to the FILE_EXTENSION file
        BufferedWriter csvWriter = new BufferedWriter(new FileWriter(fileNameCSV)); //writer object that writes to the csv file
        writer.write("title: " + label_title_tf.getText());                          //write label title to the file
        csvWriter.write("title: " + label_title_tf.getText());  
        csvWriter.write(",");                                                        //put a comma for the csv
        
        writer.newLine();                                       //insert line break
        csvWriter.newLine();
        
        writer.write("header: " + header_number_tf.getText());  //write header/modelnumber to the file
        csvWriter.write("header: " + header_number_tf.getText());
        
        csvWriter.write(",");   //put comma for the csv
        
        writer.newLine();       //insert line break
        csvWriter.newLine();    
        
        //loop to cycle through the serial numbers table data
        for(int i = 0; i < this.serialNumbers_table.getRowCount(); i++){
            try{
                 Object obj_value = this.serialNumbers_table.getValueAt(i, 0);  //value of the current row being read
                 String value = obj_value.toString();                           //convert read value to a string
                 writer.write(value);                                           //write the value to the file
                 csvWriter.write(value);
                 csvWriter.write(",");                                          //put a comma for the csv

                 writer.newLine();                                              //insert line break
                 csvWriter.newLine();
             
            } catch (NullPointerException npe) {   //catches null pointers thrown when .getValueAt is null
                continue;
            }
        }
        writer.close(); //close files
        csvWriter.close();
     } catch (FileNotFoundException fnf) {  //filenotfound thrown when directory is missing
         //try and recreate directory structure
         if(createFileDirectory()){ //if successful then call this function again
             saveDataText();
         } else {
             System.out.println("Unable to create file");   //if failure then give up and don't save
             return;
         }
     } catch (IOException ioe) {    //thrown when writer objects
         System.out.println(ioe);
     }
 }
 
 
 /*
  * Function: resolveFileName
  * Purpose: Resolves the path for a file to be saved by the program. Also handles the auto
  * filename incrementing.
  * @param: String fileType - the type of file that is being saved {PDF,LBL,CSV}
  * @returns: String fileName - the name as the absolute path to the file
  */
 private String resolveFileName(String fileType){
     String fileName;   //holds file name
     File dataFile;     //file object to test if file exists
     String location;   //location of the file
     String title = this.label_title_tf.getText();  //title of the file
     
     //if no file name provided then use 'untitled'
     if(title.trim() == null || title.trim().equals("")){
         title = "untitled";
     }
     
     //Block to determine where to save the file based on file extension
     if(fileType == ".pdf"){
         location = System.getProperty("user.home")+"\\Documents\\PackingLabels\\";
     } else if (fileType == ".lbl") {
         location = System.getProperty("user.home")+"\\Documents\\PackingLabels\\LabelFiles\\";
     } else if (fileType == ".csv"){
         location = System.getProperty("user.home")+"\\Documents\\PackingLabels\\LabelFiles\\csvs\\";
     } else {
         location = System.getProperty("user.home")+"\\Documents\\PackingLabels\\LabelFiles\\";
     }
     
     
     int i = 0; //file name increment counter
     do{        //loop until you have a unique file name
         if(i == 0){
             fileName = location + (title+fileType).trim();
         } else {
             fileName = location + (title + "["+i+"]"+fileType).trim();
         }
         dataFile = new File(fileName);
         i++;
     } while(dataFile.exists());    
     return fileName;
 }
 
 /*
  * Function: loadData
  * Purpose: loads the data from a selected .FILE_EXTENSION file or a .CSV file and populates the
  * application's serial numbers data table.
  * @param: String fileName - as the absolute path to the file that is to be loaded
  */
 private void loadData(String fileName){
        try {
            boolean isCSV = false;  //boolean value for checking if the file being read is a csv
            
            //check if the file is a .csv file if it is then set isCSV true
            if(fileName.contains(".csv"))
                isCSV = true;
            
            //Reader object that connects to the file to be loaded
            BufferedReader reader = new BufferedReader(new FileReader(fileName));
            
            String currentLine = reader.readLine(); //current line of the file being read
            
            int rowCount = 0;   //determines which row the data is going to populate
            while(currentLine != null) {    //loop through the file until you find no data
                
                //if you're at the max number of rows in the table, increment
                if(rowCount >= labelSize){
                    increaseTableSize();
                }
                
                //if the current line contains 'title:' then it must be the title of the label
                if(currentLine.contains("title:")){
                    //parse the 'title:' from the line
                    String [] temp = currentLine.split(":");
                    
                    if(temp.length > 1){                       //if there's anything left after splitting then that's your title
                        String text = temp[1].trim();          //trim any whitespace from the title
                        if(isCSV){                             //if it's a csv file then remove the comma at the end
                            text = text.substring(0, text.length()-1);
                        }
                                                              //finally set the label title field text to what was parsed
                        this.label_title_tf.setText(text);
                    }
                } else if (currentLine.contains("header:")) { //else if it contains 'header:' then it must be the header/model number
                    //parse the 'header:' from the line
                    String [] temp = currentLine.split(":");    
                    
                    if(temp.length > 1){                    //if there's anything left after splitting then that's your header/modelnumber
                        String text = temp[1].trim();       //trim any whitespace
                        if(isCSV){                          //if it's a csv file then remove the comma at the end
                             text = text.substring(0, text.length()-1);
                        }
                        
                        //finally set the label title field text to what was parsed
                        this.header_number_tf.setText(text);
                    }
                } else {                                                    //else it must be a serial number line
                    String text = currentLine.trim();                       //trim the whitespace
                    if(isCSV){                                              //if it's a csv remove the comma at the end
                        text = text.substring(0, text.length()-1);
                    }
                    this.serialNumbers_table.setValueAt(text, rowCount, 0); //set the value of the row to the read data
                    rowCount++;                                             //increment the row count
                }
                currentLine = reader.readLine();
            }
            //check once more to see if more lines need be added to the input table
            if(rowCount >= labelSize){
                increaseTableSize();
            }
        } catch (FileNotFoundException fnf) { //should never be thrown, but will occur if loading file disappears
            return;
        } catch (IOException ioe) { //thrown when the reader breaks
            return;
        }
 }
 
 /*
  * Function: createFileDirectory
  * Purpose: Generates the directory structure the application uses. Places a folder in the user's 'home'
  * directory called 'Documents' then the 'PackingLabels' directory where the pdf files are stored, then
  * the LabelFiles directory where the load data (FILE_EXTENSION) data is stored, and finally the csvs
  * directory where all csv copies of the data are stored. 
  * Function is 100% passive in that if will only create a directory if it doesn't exist.
  * @returns true - if directory structure was generated successfull
  * @returns false - if for whatever reason it failed...and it probably throws an exception that isn't handled
  */
 private boolean createFileDirectory(){
     return (new File(System.getProperty("user.home")+"\\Documents\\PackingLabels\\LabelFiles\\csvs")).mkdirs();
 }
 
 /*
  * Function: getTableSize
  * Purpose: Returns the number of data elements in the table, as rowCount simply returns the number of 
  * rows the serial numbers table object contains regardless of if they're populated or not.
  * @returns: int dataCount - the amount of non-null/empty data it found. 
  */
 private int getTableSize(){
     int dataCount = 0;
     for(int i = 0; i < this.serialNumbers_table.getRowCount(); i++){
          try{
           Object obj_value = this.serialNumbers_table.getValueAt(i, 0);
            String value = obj_value.toString();
            //if you find data in the table then return true
            if(!value.trim().equals("")) 
                dataCount++;
         } catch (NullPointerException npe) {
             continue;
         }
     }
     return dataCount;
 }
 
 /*
  * Function: printLabel_btnActionPerformed
  * Purpose: Main save and print logic for the program. When the button is pressed the program checks
  * if the serial numbers table has any data, if not then it generates an error dialog and returns. If
  * data is found then it checks if there's a title, if not then it generates a dialog and returns. If
  * those two conditions are met then it starts creating the PDF file
  */
private void printLabel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printLabel_btnActionPerformed
    try{
        if(!findData()){
            //custom title, error icon
            JOptionPane.showMessageDialog(null,
                "No barcodes to generate, don't waste a label!",
                "No data error",
                JOptionPane.ERROR_MESSAGE);
            return;
        } else if (this.label_title_tf.getText().equals(HINT_TEXT) || this.label_title_tf.getText().trim().equals("")){
             JOptionPane.showMessageDialog(null,
                "Please title the label! \nFormat: Invoice, PO, Customer",
                "Invalid Title",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        /*
         * step 1
         * Create document and set the page size. A6 is the closest thing to 4x6
         */
         
        Document document = new Document(PageSize.A6, 7.5f, 7.5f,0f,0f);
        /*
         * step 2
         * Create writer object and create the actual PDF file.
         */
        PdfWriter writer;
        String fileName = resolveFileName(".pdf");
        try{
            writer = PdfWriter.getInstance(document, new FileOutputStream(fileName));
        } catch (FileNotFoundException fnf) {
           boolean success = createFileDirectory();
            if (success) {
              writer = PdfWriter.getInstance(document, new FileOutputStream(fileName));
            } else {
                System.err.println("Unable to make directory");
                return;
            }
        }
      
        /*
         * step 3
         * Open the document by opening that actual PDF file
         */
        document.open();
        
        /*
         * step 4
         * Initialize table and barcode objects as well as other variables to be used
         */
        PdfContentByte cb = writer.getDirectContent();      //needed to convert a barcode to an image
        
        int caseNumber = 1;     //the current box number for the label; defaults to 1
        int numberOfCases = 1;  //the max number of boxes; defaults to 1
       
        
        
        PdfPTable table = initTable(3);     //init pdf table 
        
        PdfPCell cell = new PdfPCell();     //initalize cell object to dump the cell objects into
        cell.setFixedHeight(1f);            //set the max height of a cell table cell element
        cell.setPaddingTop(1f);             //set the padding at the top of the cell to help with spacing
        
        
        Barcode39 code39 = new Barcode39(); //init barcode object 
        code39.setSize(6f);                 //set barcode text size
        code39.setBarHeight(8);             //set the height of the bars
        code39.setX(.5f);                   //set the width of the bars
        int counter = 1;
        
        Integer unitsPerLabel;              //number of units to go on each label; physical limit is 20
        
        //try and parse the value out of the units per case field
        try{
             unitsPerLabel = Integer.parseInt(this.unitsPerCase_tf.getText());
             int test = unitsPerLabel + 1;
        } catch (Exception e){  //if an int couldn't be parsed then default unitsPerLabel to PACK_SIZE
            unitsPerLabel = PACK_SIZE;
        }
        
        //determine the number of boxes based on the number of serial numbers scanned in and units per box
        numberOfCases = (int)Math.ceil((float)getTableSize() / unitsPerLabel);
        
        
        addHeader(document, writer, caseNumber, numberOfCases); //add title and header to the document
        
        
        for(int i = 0; i < this.serialNumbers_table.getRowCount(); i ++, counter++){
            try{
                Object obj_value = this.serialNumbers_table.getValueAt(i, 0); //get the value of the current table row
                String value = obj_value.toString();                          //convert value to string
                
                //if for whatever reason the value is null or empty do nothing, decrement the counter and continue to the next row
                if(value == null || value.trim().equals("")){
                    counter--;
                    continue;
                } else {
                    boolean atLabelCapacity = (i % PACK_SIZE == 0 && i != 0);   //check to see if you're at the max units per label
                    boolean atBoxCapacity = (i % unitsPerLabel == 0 && i != 0); //check to see if you're at max units for a box
                    if(atBoxCapacity || atLabelCapacity) {                      //if you're at capacity you're going to need to make a newlabel
                        if((atLabelCapacity && atBoxCapacity) || atBoxCapacity){ //if you're at both capacities then increment case number
                                                                                 //of if you're just at box capacity increment case number
                            caseNumber++;
                        } 
                        document.add(table);                                    //add the current table to the document
                        document.newPage();                                     //create a new page
                        addHeader(document, writer, caseNumber, numberOfCases); //add header to the new page
                        table = initTable(3);                                   //initialize a new table object
                    }
                    
                    //create cell to hold current item number/iteration/count
                    cell = new PdfPCell(new Paragraph(""+counter, new Font(Font.FontFamily.HELVETICA, 6)));
                    cell.setBorder(0);              //remove cell border
                    cell.setPaddingTop(1f);         //pad the top of the cell a little for spacing
                    table.addCell(cell);            //add the cell to table
                    
                    code39.setCode(value.toUpperCase());    //set barcode code
                    
                    
                    if(value.length() > 40){            //if you're over 40 chars adjust the scale a bit
                        code39.setX(.4f);
                    }
                    
                    //create barcode image
                    com.itextpdf.text.Image tehImage = code39.createImageWithBarcode(cb, null, null); 
                    
                    
                    /*if(value.length() > 40) {//&& value.length() < 25)
                        //tehImage.scaleAbsoluteWidth(273);
                    */
                    
                    cell = new PdfPCell(tehImage);  //add image data to cell object
                    cell.setBorder(0);              //remove cell border
                    cell.setPaddingTop(1f);         //set the top padding for spacing
                    table.addCell(cell);            //add the cell to the table
                }
            } catch(Exception e) {  //catch any exceptions and just press forward
                continue;
            }
        }
        
        document.add(table);  //finally add table to the document
        
        writer.setOpenAction(new PdfAction(PdfAction.PRINTDIALOG)); //make it so print dialog opens when pdf opens
        /*
         * step 5
         * Close the document
         */
        document.close();
        
        //save the data to .FILE_EXTENSION and .csv
        saveDataText();
        
        
        //open up adobe with the file you just made
        if (Desktop.isDesktopSupported()) {
            try {
                File myFile = new File(fileName);
                Desktop.getDesktop().open(myFile);
            } catch (FileNotFoundException fnf){
                JOptionPane.showMessageDialog(null,
                    "Please close the PDF file before creating a new label!",
                    "File access error",
                    JOptionPane.ERROR_MESSAGE);
                return;
            } catch (IOException ioe) {
                  JOptionPane.showMessageDialog(null,
                    "Error generating PDF file, please restart program and try again.",
                    "IO Error",
                    JOptionPane.ERROR_MESSAGE);
                return;
            } 
        }
    } catch (FileNotFoundException fnf){
                JOptionPane.showMessageDialog(null,
                "Please close the PDF file before creating a new label!",
                "File access error",
                JOptionPane.ERROR_MESSAGE);
            return;
    } catch (DocumentException de) {
            JOptionPane.showMessageDialog(null,
                "There was a problem generating the label, please create a new label and try again.",
                "Document error",
                JOptionPane.ERROR_MESSAGE);
            return;
    }
}//GEN-LAST:event_printLabel_btnActionPerformed

/*
 * Function: newLabel_btnActionPerformed
 * Purpose: Clears all data fields so that a new label can be made
 * @param: ActionEvent evt
 */
private void newLabel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLabel_btnActionPerformed
    clear_btnActionPerformed(evt);          //call clear button to clear the serials table
     this.header_number_tf.setText(null);   //clear the model number field
     this.label_title_tf.setText(null);     //clear the title field
     this.unitsPerCase_tf.setText("20");    //reset units per case to 20
     this.serialNumbers_table.clearSelection(); //clear any selected rows on the serials table
     focusTf();                             //set focus back to the title field
}//GEN-LAST:event_newLabel_btnActionPerformed


/*
 * Function: label_title_tfKeyPressed
 * Purpose: Redirects input to the model number/header field on a line return
 * @param: ActionEvent evt
 */
private void label_title_tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_label_title_tfKeyPressed
    int keycode = evt.getKeyCode();
    if(keycode == 10){
        this.header_number_tf.requestFocusInWindow();
        this.header_number_tf.selectAll();
    }
}//GEN-LAST:event_label_title_tfKeyPressed

/*
 * Function: header_number_tfKeyPressed
 * Purpose: Redirects input to the first row of the serials table on a line return
 * @param: ActionEvent evt
 */
private void header_number_tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_header_number_tfKeyPressed
  int keycode = evt.getKeyCode();
  if(keycode == 10){
        this.serialNumbers_table.requestFocusInWindow();
        this.serialNumbers_table.setColumnSelectionInterval(0,0);
        this.serialNumbers_table.setRowSelectionInterval(0,0);
    }
}//GEN-LAST:event_header_number_tfKeyPressed

/*
 * Function: serialNumbers_tableKetPressed
 * Purpose: If delete is pressed it removes the row, if you do a line return on the last row then it
 * calls the function to increase the table row count by PACK_SIZE
 * @param: ActionEvent evt
 */
private void serialNumbers_tableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serialNumbers_tableKeyPressed
    int keyCode = evt.getKeyCode();
    //System.out.println(evt);
    //System.out.println(evt.getKeyCode());
    if(keyCode == 127){                     //if delete key is pressed
        JTable j = (JTable)evt.getSource(); //get the table object
        int row = j.getSelectedRow();       //get the selected row index
        DefaultTableModel tm = (DefaultTableModel)serialNumbers_table.getModel();   //get the table model
        tm.removeRow(row);                  //remove the row from the table model
        if(tm.getRowCount() < PACK_SIZE)    //if you removed a row make sure you're not under PACK_SIZE
            tm.addRow((java.util.Vector)null); //if you are then add a row to the bottom of the table
        //System.out.println(evt.getKeyCode());
    } else if (keyCode == 10) { //else if you did a line return then check to see if you need to increase table size
        JTable j = (JTable)evt.getSource(); //get the table
        int row = j.getSelectedRow();       //get the selected row
      
        if(row == labelSize-1){             //if you're on the last row then increase size
           increaseTableSize();
        }
    }
}//GEN-LAST:event_serialNumbers_tableKeyPressed

/*
 * Function: increaseTableSize
 * Purpose: Increases the number of rows on the serialsNumbers table object.
 */
private void increaseTableSize(){
    DefaultTableModel tm = (DefaultTableModel)serialNumbers_table.getModel();   //get the table model
    labelSize += PACK_SIZE; //increase label size by PACK_SIZE to ensure every row after PACK_SIZE doesn't call this function
     
    for(int i = 0; i < PACK_SIZE; i++){     //add PACK_SIZE number of empty rows to the table
        tm.addRow((java.util.Vector)null);
    }
}

/*
 * Function: serialNumbers_tableMouseClicked
 * Purpose: An attempt to avert auto editing on click, but failure
 * @param: MouseEvent evt
 */
private void serialNumbers_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serialNumbers_tableMouseClicked
    System.out.println(evt.getPoint());
    System.out.println(evt.getComponent());
    
    //Component component = evt.getComponent();
    //JTextField tf = (JTextField) component;
    //System.out.println(tf.getText());
    
    int row = this.serialNumbers_table.rowAtPoint(evt.getPoint());
    int col = this.serialNumbers_table.columnAtPoint(evt.getPoint());
    this.serialNumbers_table.requestFocusInWindow();
    this.serialNumbers_table.setColumnSelectionInterval(col,col);
    this.serialNumbers_table.setRowSelectionInterval(row,row);
}//GEN-LAST:event_serialNumbers_tableMouseClicked

/*
 * Function: print_menu_itemActionPerformed
 * Purpose: Calls the print label button action which handles the printing logic
 * @param ActionEvent evt 
 */
private void print_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_menu_itemActionPerformed
     printLabel_btnActionPerformed(evt);
}//GEN-LAST:event_print_menu_itemActionPerformed


/*
 * Function: formWindowOpened
 * Purpose: Initializes the custom cell editor for the serial numbers table, the file chooser for when
 * open file is called and the font used.
 * @param: WindowEvent evt
 */
private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        int vColIndex = 0;
        TableColumn col = serialNumbers_table.getColumnModel().getColumn(vColIndex);
        col.setCellEditor(new MyTableCellEditor());
        //make sure the directory is created in order to open
        createFileDirectory();
        File openDirectory = new File(System.getProperty("user.home")+"\\Documents\\PackingLabels\\LabelFiles");
        jFileChooser1.setCurrentDirectory(openDirectory);
        FileFilter filter = new ExtensionFileFilter(".lbl, .csv", new String [] {"LBL", "CSV"});
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        jFileChooser1.setFileFilter(filter);
        
        this.serialNumbers_table.setFont(new java.awt.Font("Arial", 0, 30));
}//GEN-LAST:event_formWindowOpened

/*
 * Function: open_menuItemAction
 * Purpose: Opens the fileChooser and allows user to select a file from whatever directory they desire
 * @param ActionEvent evt
 */
private void open_menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_menuItemActionPerformed
    int returnVal = this.jFileChooser1.showOpenDialog(this);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
        newLabel_btnActionPerformed(evt);
        File file = this.jFileChooser1.getSelectedFile();
        String fileName = file.getName();
        String path = file.getAbsolutePath();
        System.out.println(path);
        loadData(path);
    }
}//GEN-LAST:event_open_menuItemActionPerformed

/*
 * Function: open_btnActionPerformed
 * Purpose: Calls the menu action for opening
 * @param ActionEvent evt
 */
private void open_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_btnActionPerformed
    open_menuItemActionPerformed(evt);
}//GEN-LAST:event_open_btnActionPerformed

/*
 * Function: newLabel_menuItemActionPerformed
 * Purpose: Calls the newlabel_btn action for clearing the fields
 * @param ActionEvent evt
 */
private void newLabel_menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLabel_menuItemActionPerformed
    newLabel_btnActionPerformed(evt);
}//GEN-LAST:event_newLabel_menuItemActionPerformed

/*
 * Function: label_title_tfMouseClicked
 * Purpose: Selects all text data in the label title field when a click is done
 * @param: MouseEvent evt
 */
private void label_title_tfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label_title_tfMouseClicked
    this.label_title_tf.selectAll();
}//GEN-LAST:event_label_title_tfMouseClicked

/*
 * Function: header_number_tfMouseClicked
 * Purpose: Selects all text data in the header number field when a click is done
 * @param: MouseEvent evt
 */
private void header_number_tfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_header_number_tfMouseClicked
    this.header_number_tf.selectAll();
}//GEN-LAST:event_header_number_tfMouseClicked

/*
 * Function: unitsPerCase_tfFocusLost
 * Purpose: Ensures that you can't exit the field and leave it empty; if you leave it empty
 * it fills with 20
 * @param: FocusEvent evt 
 */
private void unitsPerCase_tfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_unitsPerCase_tfFocusLost
    if(this.unitsPerCase_tf.getText().trim().equals(""))
        this.unitsPerCase_tf.setText("20");
}//GEN-LAST:event_unitsPerCase_tfFocusLost

/*
 * Function: unitsPerCase_tfKeyReleased
 * Purpose: Ensures that you only type numbers into the units per case field; if you type in
 * a non numeric character it is removed. Could use some optimization.
 */
private void unitsPerCase_tfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitsPerCase_tfKeyReleased
    String text = unitsPerCase_tf.getText();
    String output = "";
    int replaced = -1;
    
    //ignore arrow keys
    switch(evt.getKeyCode()){
        case KeyEvent.VK_UP: return;
        case KeyEvent.VK_DOWN: return;
        case KeyEvent.VK_LEFT: return;
        case KeyEvent.VK_RIGHT: return;
    }
    char [] textArray = text.toCharArray();
    
    //loop through and check the text every time
    for(int i = 0; i < textArray.length; i++)
    {
        try{
            String input = ""+textArray[i];
            Integer tehInt = Integer.parseInt(input);
            int test = tehInt + 1;
            output += textArray[i];
        } catch (Exception e){
            textArray[i] = 'x';
            replaced = i;
        }
    }
    unitsPerCase_tf.setText(output);    //sets the text either to the fixed output or whatever value was entered
    if(replaced != -1)              //if something has been replaced put the caret back where it was
        unitsPerCase_tf.setCaretPosition(replaced);
    
}//GEN-LAST:event_unitsPerCase_tfKeyReleased

/*
 * Function: unitsPerCase_tfKeyPressed
 * Purpose: Focuses input on the serial numbers table when line return 
 * @param: KeyEvent evt
 */
private void unitsPerCase_tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitsPerCase_tfKeyPressed
   int keycode = evt.getKeyCode();
    if(keycode == 10){
        this.serialNumbers_table.requestFocusInWindow();
        this.serialNumbers_table.setColumnSelectionInterval(0,0);
        this.serialNumbers_table.setRowSelectionInterval(0,0);
    }
}//GEN-LAST:event_unitsPerCase_tfKeyPressed

/*
 * Function: unitsPerCase_tfMouseClicked
 * Purpose: Selects all text in the units per box field on click
 */
private void unitsPerCase_tfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unitsPerCase_tfMouseClicked
    this.unitsPerCase_tf.selectAll();
}//GEN-LAST:event_unitsPerCase_tfMouseClicked

    private void serialNumbers_tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serialNumbers_tableMousePressed
           System.out.println(evt.getPoint());
    System.out.println(evt.getComponent());
    
    Component component = evt.getComponent();
    JTable tb = (JTable) component;
    
    
    int row = tb.rowAtPoint(evt.getPoint());
    int col = tb.columnAtPoint(evt.getPoint());
    System.out.println(tb.getValueAt(row, col));
    this.serialNumbers_table.requestFocusInWindow();
    this.serialNumbers_table.setColumnSelectionInterval(col,col);
    this.serialNumbers_table.setRowSelectionInterval(row,row);
    }//GEN-LAST:event_serialNumbers_tableMousePressed

    private void serialEntry_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialEntry_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serialEntry_tfActionPerformed

    private void serialAdd_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialAdd_btnActionPerformed
        
        this.serialsContainer_sp.add(new SerialEntry(1,"32132136546").drawSerialEntry());
        System.out.println("Clicky");
        this.serialsContainer_sp.revalidate();
        this.serialsContainer_sp.updateUI();
        this.serialsContainer_sp.repaint();
        this.header_panel.add(new SerialEntry(1,"32132136546").drawSerialEntry());
        this.header_panel.repaint();
    }//GEN-LAST:event_serialAdd_btnActionPerformed
    
    private boolean addSerial(){
        String serialNumber = this.serialEntry_tf.getText();
        
        
        return true;
    }
    
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                GUI gui = new GUI();        //create an instance of a GUI
                BufferedImage image = null; //image object to hold favicon image
                
               try{                         //set the icon in the upper left corner
                   image = ImageIO.read(gui.getClass().getResource("unixfavicon.png")); 
                }
                catch(IOException e){
                    System.err.println("Error file not found");
                    e.printStackTrace();
                }
               gui.setIconImage(image);
               gui.focusTf();        //focus to the title field on program entry
               gui.setVisible(true); //set the gui visible
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear_btn;
    private javax.swing.JLabel count_lbl;
    private javax.swing.JLabel count_lbl_data;
    private javax.swing.JPanel display_panel;
    private javax.swing.JMenu file_menu;
    private javax.swing.JPanel footer_panel;
    private javax.swing.JLabel headerNumber_lbl;
    private javax.swing.JTextField header_number_tf;
    private javax.swing.JPanel header_panel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTitle_lbl;
    private javax.swing.JTextField label_title_tf;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton newLabel_btn;
    private javax.swing.JMenuItem newLabel_menuItem;
    private javax.swing.JButton open_btn;
    private javax.swing.JMenuItem open_menuItem;
    private javax.swing.JButton printLabel_btn;
    private javax.swing.JMenuItem print_menu_item;
    private javax.swing.JButton serialAdd_btn;
    private javax.swing.JTextField serialEntry_tf;
    private javax.swing.JTable serialNumbers_table;
    private javax.swing.JLabel serial_lbl;
    private javax.swing.JScrollPane serialsContainer_sp;
    private javax.swing.JLabel unitsPerCase_lbl;
    private javax.swing.JTextField unitsPerCase_tf;
    // End of variables declaration//GEN-END:variables
    
    /*
     * Class: MyTableCellEditor
     * @author: Sean Bailey
     * Date Created: 5/17/2012
     * Date Modified: 5/18/2012
     * Purpose: Basically a custom cell editor to stop default appending action of a table cell
     * to simply click and delete all data...this probably needs to be developed more. 
     */
    private class MyTableCellEditor extends AbstractCellEditor implements TableCellEditor {
        // This is the component that will handle the editing of the cell value
        JComponent component = new JTextField();

        // This method is called when a cell value is edited by the user.
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int rowIndex, int vColIndex) {
            // 'value' is value contained in the cell located at (rowIndex, vColIndex)

            if (isSelected) {
                // cell (and perhaps other cells) are selected
                System.out.println(value);
            }

            // Configure the component with the specified value
            
            ((JTextField)component).setText(null);    //set text on edit to empty
            

            // Return the configured component
            return component;
        }

        // This method is called when editing is completed.
        // It must return the new value to be stored in the cell.
        public Object getCellEditorValue() {
            return ((JTextField)component).getText();
        }
    
    }
    
 
}

