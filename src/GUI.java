import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import javax.swing.filechooser.FileFilter;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

/*
* Class: GUI
* @author: Sean Bailey
* Date Created: 5/14/2012
* Date Modified: 5/18/2012
* Purpose: Contains all logic for the barcode scanner app. Bad practice but the app is so small it really
* doesn't make that much of a difference.
* 
*/
 
public class GUI extends javax.swing.JFrame {
    private static final int PACK_SIZE = 20;                //max number of elements that will fit on a label
    private static final String HINT_TEXT = "Invoice , PO, Customer";   //the 'hint' text that shows up on launch in the title field.
    private int serialCount = 0;
    ArrayList<String> serialEntries = new ArrayList<String>();
    boolean dataSaved = true;
    PDFLabel pdfLabel = null;
    HardDriveInvoice hdi = null;
    
    /** Creates new form GUI */
    public GUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        header_panel = new javax.swing.JPanel();
        labelTitle_lbl = new javax.swing.JLabel();
        label_title_tf = new javax.swing.JTextField();
        headerNumber_lbl = new javax.swing.JLabel();
        model_number_tf = new javax.swing.JTextField();
        unitsPerCase_lbl = new javax.swing.JLabel();
        unitsPerCase_tf = new javax.swing.JTextField();
        footer_panel = new javax.swing.JPanel();
        clear_btn = new javax.swing.JButton();
        printLabel_btn = new javax.swing.JButton();
        newLabel_btn = new javax.swing.JButton();
        open_btn = new javax.swing.JButton();
        email_btn = new javax.swing.JButton();
        display_panel = new javax.swing.JPanel();
        serial_lbl = new javax.swing.JLabel();
        serialEntry_tf = new javax.swing.JTextField();
        serialAdd_btn = new javax.swing.JButton();
        count_lbl = new javax.swing.JLabel();
        serialCount_lbl_data = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        boxCount_lbl_data = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        serialsTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        file_menu = new javax.swing.JMenu();
        newLabel_menuItem = new javax.swing.JMenuItem();
        open_menuItem = new javax.swing.JMenuItem();
        print_menu_item = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Packing Label Creator v2.0");
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(300, 600));
        setName("Hard drive packing label creator"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        labelTitle_lbl.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        labelTitle_lbl.setText("Title:");
        labelTitle_lbl.setToolTipText("Label Title: Invoice, PO, Customer");

        label_title_tf.setFont(new java.awt.Font("DialogInput", 0, 20)); // NOI18N
        label_title_tf.setText("Invoice, PO, Customer");
        label_title_tf.setToolTipText("Invoice, PO, Customer");
        label_title_tf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                label_title_tfMouseClicked(evt);
            }
        });
        label_title_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                label_title_tfKeyPressed(evt);
            }
        });

        headerNumber_lbl.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        headerNumber_lbl.setText("Model Number:");
        headerNumber_lbl.setToolTipText("Model number");

        model_number_tf.setFont(new java.awt.Font("DialogInput", 0, 20)); // NOI18N
        model_number_tf.setToolTipText("Model number");
        model_number_tf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                model_number_tfMouseClicked(evt);
            }
        });
        model_number_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                model_number_tfKeyPressed(evt);
            }
        });

        unitsPerCase_lbl.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        unitsPerCase_lbl.setText("Units per box:");
        unitsPerCase_lbl.setToolTipText("Max number of units in a box.");

        unitsPerCase_tf.setFont(new java.awt.Font("DialogInput", 0, 20)); // NOI18N
        unitsPerCase_tf.setText("20");
        unitsPerCase_tf.setToolTipText("Max number of units in a box.");
        unitsPerCase_tf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unitsPerCase_tfMouseClicked(evt);
            }
        });
        unitsPerCase_tf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                unitsPerCase_tfFocusLost(evt);
            }
        });
        unitsPerCase_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                unitsPerCase_tfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                unitsPerCase_tfKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout header_panelLayout = new javax.swing.GroupLayout(header_panel);
        header_panel.setLayout(header_panelLayout);
        header_panelLayout.setHorizontalGroup(
            header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(header_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, header_panelLayout.createSequentialGroup()
                        .addComponent(labelTitle_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_title_tf, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE))
                    .addGroup(header_panelLayout.createSequentialGroup()
                        .addComponent(headerNumber_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(model_number_tf))
                    .addGroup(header_panelLayout.createSequentialGroup()
                        .addComponent(unitsPerCase_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unitsPerCase_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        header_panelLayout.setVerticalGroup(
            header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(header_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_title_tf)
                    .addComponent(labelTitle_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headerNumber_lbl)
                    .addComponent(model_number_tf))
                .addGap(8, 8, 8)
                .addGroup(header_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitsPerCase_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitsPerCase_lbl)))
        );

        header_panelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {label_title_tf, model_number_tf, unitsPerCase_tf});

        clear_btn.setText("clear serials");
        clear_btn.setToolTipText("Clear all serial numbers from the table.");
        clear_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_btnActionPerformed(evt);
            }
        });

        printLabel_btn.setText("save & print");
        printLabel_btn.setToolTipText("Saves pdf and opens file");
        printLabel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printLabel_btnActionPerformed(evt);
            }
        });

        newLabel_btn.setText("new label");
        newLabel_btn.setToolTipText("Clears all fields for a new label.");
        newLabel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLabel_btnActionPerformed(evt);
            }
        });

        open_btn.setText("open label");
        open_btn.setToolTipText("Opens a label file.");
        open_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_btnActionPerformed(evt);
            }
        });

        email_btn.setText("Email");
        email_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                email_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout footer_panelLayout = new javax.swing.GroupLayout(footer_panel);
        footer_panel.setLayout(footer_panelLayout);
        footer_panelLayout.setHorizontalGroup(
            footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footer_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(open_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newLabel_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clear_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(email_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printLabel_btn)
                .addContainerGap())
        );
        footer_panelLayout.setVerticalGroup(
            footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footer_panelLayout.createSequentialGroup()
                .addGroup(footer_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(email_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(printLabel_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clear_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newLabel_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(open_btn, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addGap(0, 2, Short.MAX_VALUE))
        );

        serial_lbl.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        serial_lbl.setText("Serial #:");

        serialEntry_tf.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        serialEntry_tf.setText("Click here and scan.");
        serialEntry_tf.setToolTipText("Scan serial numbers in here and press enter.");
        serialEntry_tf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serialEntry_tfMouseClicked(evt);
            }
        });
        serialEntry_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialEntry_tfActionPerformed(evt);
            }
        });
        serialEntry_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                serialEntry_tfKeyPressed(evt);
            }
        });

        serialAdd_btn.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        serialAdd_btn.setText("Add");
        serialAdd_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialAdd_btnActionPerformed(evt);
            }
        });

        count_lbl.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        count_lbl.setText("Serial Count:");

        serialCount_lbl_data.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        serialCount_lbl_data.setText("0");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Box Count:");

        boxCount_lbl_data.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        boxCount_lbl_data.setText("0");

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        serialsTable.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        serialsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Serial"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        serialsTable.setAutoscrolls(false);
        serialsTable.setColumnSelectionAllowed(true);
        serialsTable.getTableHeader().setReorderingAllowed(false);
        serialsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serialsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(serialsTable);
        serialsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        serialsTable.getColumnModel().getColumn(0).setMinWidth(50);
        serialsTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        serialsTable.getColumnModel().getColumn(0).setMaxWidth(50);

        javax.swing.GroupLayout display_panelLayout = new javax.swing.GroupLayout(display_panel);
        display_panel.setLayout(display_panelLayout);
        display_panelLayout.setHorizontalGroup(
            display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(display_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(display_panelLayout.createSequentialGroup()
                        .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(count_lbl)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(boxCount_lbl_data)
                            .addComponent(serialCount_lbl_data)))
                    .addGroup(display_panelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(serial_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serialEntry_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serialAdd_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );
        display_panelLayout.setVerticalGroup(
            display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(display_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(display_panelLayout.createSequentialGroup()
                        .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(serial_lbl)
                            .addComponent(serialEntry_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serialAdd_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(count_lbl)
                            .addComponent(serialCount_lbl_data))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(display_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(boxCount_lbl_data))
                        .addContainerGap())
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)))
        );

        file_menu.setText("File");

        newLabel_menuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newLabel_menuItem.setText("New Label");
        newLabel_menuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLabel_menuItemActionPerformed(evt);
            }
        });
        file_menu.add(newLabel_menuItem);

        open_menuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open_menuItem.setText("Open");
        open_menuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_menuItemActionPerformed(evt);
            }
        });
        file_menu.add(open_menuItem);

        print_menu_item.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        print_menu_item.setText("Print");
        print_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_menu_itemActionPerformed(evt);
            }
        });
        file_menu.add(print_menu_item);

        menuBar.add(file_menu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(footer_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(display_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(header_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(header_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(display_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(footer_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

/*
 * Function: clear_btnActionPerformed
 * Purpose: clears the JTable that holds the serial numbers. One at a time, and sets the focus
 * back at the first row ready for input once again.
 * @param: actionEvent evt
 */
private void clear_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_btnActionPerformed
    DefaultTableModel model = (DefaultTableModel)this.serialsTable.getModel();
    for(int i = model.getRowCount() - 1 ; i >= 0; i--){
        model.removeRow(i);
    }
    this.serialEntries = new ArrayList<String>();
    this.updateSerialCounter(-this.serialCount);
}//GEN-LAST:event_clear_btnActionPerformed

public HardDriveInvoice createHdInvoice(){
     String invoiceNumber = this.getInvoiceNumber();
     String model = this.getModel();
     Date date = new Date();
     ArrayList<String> serials = this.getSerials();
     
     return (new HardDriveInvoice(invoiceNumber, model, date, serials));
 }
 
 public String getInvoiceNumber(){
     return this.label_title_tf.getText();
 }
 
 public ArrayList<String> getSerials(){
     return this.serialEntries;
 }
 
 public String getModel(){
     return this.model_number_tf.getText();
 }
 
 private void updateInvoiceNumber(String invoiceNumber){
     this.label_title_tf.setText(invoiceNumber.trim());
 }
 
 private void updateModel(String model){
     this.model_number_tf.setText(model.trim());
 }
 
 private void updateSerialCount(String count){
     this.serialCount_lbl_data.setText(count.trim());
     //add catch for invalid number
     this.serialCount = Integer.parseInt(count.trim());
     this.checkNewBox();
 }
 
 private void loadLabel(String fileName){
     if(fileName.contains(".lbl")){
         BufferedReader br = null;
         try {
               br = new BufferedReader(new FileReader(fileName));
              //first line is empty
              if(br.readLine() != null){
                 
                //second line is Invoice: <invoice number>
                  String readLine = "";
                  readLine = br.readLine();
                  String [] currentLine = readLine.split(":");
                  //add catch for length of current line
                  this.updateInvoiceNumber(currentLine[1]);
                    //third line is Model: <model #>
                  readLine = br.readLine();
                  currentLine = readLine.split(":");
                  this.updateModel(currentLine[1]);
                  
                  //fourth line is Date: MM/dd/yyyy HH:mm:ss
                  readLine = br.readLine();
                  
                  
                //fifth line is Qty: <qty>
                  readLine = br.readLine();
                  currentLine = readLine.split(":");
                  this.updateSerialCount(currentLine[1]);
                //fifth and beyond = entry#:serial
                  while((readLine = br.readLine()) != null){
                      currentLine = readLine.split(":");
                      this.addSerial(currentLine[0], currentLine[1]);
                  }
              }
         } catch (IOException ex) {
             Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
         } catch (ArrayIndexOutOfBoundsException aiobe){
             System.err.println("Out of bounds on an array...bad stuff");
         } finally {
             try {
                 br.close();
             } catch (IOException ex) {
                 System.err.println("Buffered reader failed to close");
             }
         }
     } else {
         System.err.println("Invalid label file!");
           JOptionPane.showMessageDialog(null,
                "Not a valid .lbl file.",
                "Invalid file type error",
                JOptionPane.ERROR_MESSAGE);
     }
     
     
 }
 
 /*
  * Function: createFileDirectory
  * Purpose: Generates the directory structure the application uses. Places a folder in the user's 'home'
  * directory called 'Documents' then the 'PackingLabels' directory where the pdf files are stored, then
  * the LabelFiles directory where the load data (FILE_EXTENSION) data is stored, and finally the csvs
  * directory where all csv copies of the data are stored. 
  * Function is 100% passive in that if will only create a directory if it doesn't exist.
  * @returns true - if directory structure was generated successfull
  * @returns false - if for whatever reason it failed...and it probably throws an exception that isn't handled
  */
 private boolean createFileDirectory(){
     return (new File(System.getProperty("user.home")+"\\Documents\\PackingLabels\\LabelFiles\\csvs")).mkdirs();
 }
 

 /*
  * Function: printLabel_btnActionPerformed
  * Purpose: Main save and print logic for the program. When the button is pressed the program checks
  * if the serial numbers table has any data, if not then it generates an error dialog and returns. If
  * data is found then it checks if there's a title, if not then it generates a dialog and returns. If
  * those two conditions are met then it starts creating the PDF file
  */
private void printLabel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printLabel_btnActionPerformed
    this.generateInvoiceFiles();
    this.pdfLabel.generatePDFLabel(true);
    this.updateSavedState(true);
}//GEN-LAST:event_printLabel_btnActionPerformed

/*
 * Function: newLabel_btnActionPerformed
 * Purpose: Clears all data fields so that a new label can be made
 * @param: ActionEvent evt
 */
private void newLabel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLabel_btnActionPerformed
    clear_btnActionPerformed(evt);          //call clear button to clear the serials table
     this.model_number_tf.setText(null);   //clear the model number field
     this.label_title_tf.setText(null);     //clear the title field
     this.unitsPerCase_tf.setText("20");    //reset units per case to 20
     focusTf();                             //set focus back to the title field
}//GEN-LAST:event_newLabel_btnActionPerformed


/*
 * Function: label_title_tfKeyPressed
 * Purpose: Redirects input to the model number/header field on a line return
 * @param: ActionEvent evt
 */
private void label_title_tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_label_title_tfKeyPressed
    int keycode = evt.getKeyCode();
    if(keycode == 10){
        this.model_number_tf.requestFocusInWindow();
        this.model_number_tf.selectAll();
    }
    this.updateSavedState(false);
}//GEN-LAST:event_label_title_tfKeyPressed

/*
 * Function: header_number_tfKeyPressed
 * Purpose: Redirects input to the first row of the serials table on a line return
 * @param: ActionEvent evt
 */
private void model_number_tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_model_number_tfKeyPressed
    int keycode = evt.getKeyCode();
    this.updateSavedState(true);
}//GEN-LAST:event_model_number_tfKeyPressed

/*
 * Function: print_menu_itemActionPerformed
 * Purpose: Calls the print label button action which handles the printing logic
 * @param ActionEvent evt 
 */
private void print_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_menu_itemActionPerformed
     printLabel_btnActionPerformed(evt);
}//GEN-LAST:event_print_menu_itemActionPerformed


/*
 * Function: formWindowOpened
 * Purpose: Initializes the custom cell editor for the serial numbers table, the file chooser for when
 * open file is called and the font used.
 * @param: WindowEvent evt
 */
private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //make sure the directory is created in order to open
        createFileDirectory();
        File openDirectory = new File(System.getProperty("user.home")+"\\Documents\\PackingLabels\\LabelFiles");
        jFileChooser1.setCurrentDirectory(openDirectory);
        FileFilter filter = new ExtensionFileFilter(".lbl, .csv", new String [] {"LBL", "CSV"});
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        jFileChooser1.setFileFilter(filter);
        this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
}//GEN-LAST:event_formWindowOpened

/*
 * Function: open_menuItemAction
 * Purpose: Opens the fileChooser and allows user to select a file from whatever directory they desire
 * @param ActionEvent evt
 */
private void open_menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_menuItemActionPerformed
    int returnVal = this.jFileChooser1.showOpenDialog(this);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
        newLabel_btnActionPerformed(evt);
        File file = this.jFileChooser1.getSelectedFile();
        String fileName = file.getName();
        String path = file.getAbsolutePath();
        System.out.println(path);
        loadLabel(path);
    }
}//GEN-LAST:event_open_menuItemActionPerformed

/*
 * Function: open_btnActionPerformed
 * Purpose: Calls the menu action for opening
 * @param ActionEvent evt
 */
private void open_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_btnActionPerformed
    open_menuItemActionPerformed(evt);
}//GEN-LAST:event_open_btnActionPerformed

/*
 * Function: newLabel_menuItemActionPerformed
 * Purpose: Calls the newlabel_btn action for clearing the fields
 * @param ActionEvent evt
 */
private void newLabel_menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLabel_menuItemActionPerformed
    newLabel_btnActionPerformed(evt);
}//GEN-LAST:event_newLabel_menuItemActionPerformed

/*
 * Function: label_title_tfMouseClicked
 * Purpose: Selects all text data in the label title field when a click is done
 * @param: MouseEvent evt
 */
private void label_title_tfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_label_title_tfMouseClicked
    this.label_title_tf.selectAll();
}//GEN-LAST:event_label_title_tfMouseClicked

/*
 * Function: header_number_tfMouseClicked
 * Purpose: Selects all text data in the header number field when a click is done
 * @param: MouseEvent evt
 */
private void model_number_tfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_model_number_tfMouseClicked
    this.model_number_tf.selectAll();
}//GEN-LAST:event_model_number_tfMouseClicked

/*
 * Function: unitsPerCase_tfFocusLost
 * Purpose: Ensures that you can't exit the field and leave it empty; if you leave it empty
 * it fills with 20
 * @param: FocusEvent evt 
 */
private void unitsPerCase_tfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_unitsPerCase_tfFocusLost
    if(this.unitsPerCase_tf.getText().trim().equals(""))
        this.unitsPerCase_tf.setText("20");
}//GEN-LAST:event_unitsPerCase_tfFocusLost

/*
 * Function: unitsPerCase_tfKeyReleased
 * Purpose: Ensures that you only type numbers into the units per case field; if you type in
 * a non numeric character it is removed. Could use some optimization.
 */
private void unitsPerCase_tfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitsPerCase_tfKeyReleased
    String text = unitsPerCase_tf.getText();
    String output = "";
    int replaced = -1;
    
    //ignore arrow keys
    switch(evt.getKeyCode()){
        case KeyEvent.VK_UP: return;
        case KeyEvent.VK_DOWN: return;
        case KeyEvent.VK_LEFT: return;
        case KeyEvent.VK_RIGHT: return;
    }
    char [] textArray = text.toCharArray();
    
    //loop through and check the text every time
    for(int i = 0; i < textArray.length; i++)
    {
        try{
            String input = ""+textArray[i];
            Integer tehInt = Integer.parseInt(input);
            int test = tehInt + 1;
            output += textArray[i];
        } catch (Exception e){
            textArray[i] = 'x';
            replaced = i;
        }
    }
    unitsPerCase_tf.setText(output);    //sets the text either to the fixed output or whatever value was entered
    if(replaced != -1)              //if something has been replaced put the caret back where it was
        unitsPerCase_tf.setCaretPosition(replaced);
    
}//GEN-LAST:event_unitsPerCase_tfKeyReleased

/*
 * Function: unitsPerCase_tfKeyPressed
 * Purpose: Focuses input on the serial numbers table when line return 
 * @param: KeyEvent evt
 */
private void unitsPerCase_tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitsPerCase_tfKeyPressed

}//GEN-LAST:event_unitsPerCase_tfKeyPressed

/*
 * Function: unitsPerCase_tfMouseClicked
 * Purpose: Selects all text in the units per box field on click
 */
private void unitsPerCase_tfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unitsPerCase_tfMouseClicked
    this.unitsPerCase_tf.selectAll();
}//GEN-LAST:event_unitsPerCase_tfMouseClicked

    private void serialEntry_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialEntry_tfActionPerformed

    }//GEN-LAST:event_serialEntry_tfActionPerformed

    private void serialAdd_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialAdd_btnActionPerformed
        String temp = this.getSerial();
        if(temp == null || temp.trim().equals("")){
               JOptionPane.showMessageDialog(null,
                "Please enter a serial number",
                "Empty serial number error",
                JOptionPane.ERROR_MESSAGE);
        } else {
            this.addSerial();
        }
    }//GEN-LAST:event_serialAdd_btnActionPerformed

    private void serialEntry_tfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serialEntry_tfMouseClicked
        this.serialEntry_tf.selectAll();
    }//GEN-LAST:event_serialEntry_tfMouseClicked

    private void serialEntry_tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serialEntry_tfKeyPressed
       
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String temp = this.getSerial();
            if(temp == null || temp.trim().equals("")){
                   JOptionPane.showMessageDialog(null,
                    "Please enter a serial number",
                    "Empty serial number error",
                    JOptionPane.ERROR_MESSAGE);
            } else {
                this.addSerial();
            }
        }
    }//GEN-LAST:event_serialEntry_tfKeyPressed

    private void serialsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serialsTableMouseClicked
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the entry?", "Confirm delete", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
          this.removeSerial(this.serialsTable.getSelectedRow());
        }
    }//GEN-LAST:event_serialsTableMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("Not closing maang");
        if(!this.dataSaved){
            int reply = JOptionPane.showConfirmDialog(null, "Exit without saving/printing your current label?", "Unsaved data warning.", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                this.dispose();
                System.exit(0);
            }
            else {
                this.printLabel_btn.doClick();
            }
        } else {
            this.dispose();
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    public void generateInvoiceFiles(){
        this.hdi = this.createHdInvoice();
        this.pdfLabel = new PDFLabel(this.createHdInvoice());
    }
    
    private void email_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_email_btnActionPerformed
            this.generateInvoiceFiles();
            this.pdfLabel.generatePDFLabel(false);
            this.updateSavedState(true);
        
        String emailAddress = (String)JOptionPane.showInputDialog(
                    this,
                    "Enter the email address you wish to send the invoice to.",
                    "Email to",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    "email@unixsurplus.com");
       EmailValidator ev = new EmailValidator();
       if(!ev.validate(emailAddress)){
           JOptionPane.showMessageDialog(this,
                   "The email address you entered is not valid, please re-enter and try again.",
                    "Invalid email address error",
                    JOptionPane.ERROR_MESSAGE);
           return;
       }
        
        String[] file = new String[2];
        file[0] = System.getProperty("user.home")+"\\Documents\\PackingLabels\\LabelFiles\\"+this.getInvoiceNumber()+".lbl";
        file[1] = System.getProperty("user.home")+"\\Documents\\PackingLabels\\"+this.getInvoiceNumber()+".pdf";
        SendMailTLS smtls = new SendMailTLS(emailAddress,this.getInvoiceNumber(),file, this.hdi);
    }//GEN-LAST:event_email_btnActionPerformed
    
    private boolean checkDuplicate(){
        if(this.serialEntries.contains(this.getSerial())){
            return true;
        } else {
            return false;
        }
    }
    
    private boolean checkNewBox(){
        this.boxCount_lbl_data.setText(""+(this.serialCount) / this.getUnitsPerBox());
        boolean newBox = (this.serialCount) % this.getUnitsPerBox() == 0;
        
        if(this.serialCount == 0){
            this.boxCount_lbl_data.setText("0");
            return false;
        }
        if(newBox){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,
                "You completed a box!",
                "Box Complete",
                JOptionPane.WARNING_MESSAGE);
        }
        return (this.serialCount - 1) % this.getUnitsPerBox() == 0;
    }
    
    private int getUnitsPerBox(){
        String unitsPerBox = this.unitsPerCase_tf.getText();
        Integer upb = Integer.parseInt(unitsPerBox);
        return upb.intValue();
    }
    
    public boolean removeSerial(int index){
        int remRow = this.serialsTable.getSelectedRow();
        this.serialEntries.remove(index);
        DefaultTableModel model = (DefaultTableModel)this.serialsTable.getModel();
        model.removeRow(remRow);
        this.updateSerialCounter(-1);
        this.updateTableRows(remRow, model);
        
        
        return true; 
    }
    
    public void updateTableRows(int removedIndex, DefaultTableModel model){
        for(int i = removedIndex; i < this.serialCount; i++){
            int oldValue = (Integer)this.serialsTable.getValueAt(i, 0);
            if(oldValue < 0){ 
                oldValue = 0;
            }
            this.serialsTable.setValueAt(--oldValue, i, 0);
        }
    }
  
    
    public String getSerial(){
        return this.serialEntry_tf.getText();
    }
    
    public boolean checkSerial(){
        if((this.getSerial() == null || this.getSerial().trim().equals("")) || this.checkDuplicate()){
            return false;
        } else {
            return true;
        }
    }
    private boolean addSerial(){
        this.updateSavedState(false);
        if(checkSerial()){       
            DefaultTableModel model = (DefaultTableModel) this.serialsTable.getModel();
            model.addRow(new Object[]{this.serialCount+1,this.getSerial()});
            this.serialEntries.add(this.getSerial());
            this.updateSerialCounter(1);
            this.serialEntry_tf.setText(null);
            
            //scroll table to bottom
            this.serialsTable.scrollRectToVisible(this.serialsTable.getCellRect(this.serialsTable.getRowCount()-1, 0, true));
            
            return true;
        } else {
            if(this.checkDuplicate()){
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null,
                "You've already scanned that serial number!",
                "Duplicate Serial Error",
                JOptionPane.ERROR_MESSAGE);
                
            } else {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null,
                "No serial number entered. Please enter a serial number!",
                "No data error",
                JOptionPane.ERROR_MESSAGE);
            }
             this.serialEntry_tf.setText(null);
             return false;
        }
    }
    
    private void updateSavedState(boolean state){
        this.dataSaved = state;
    }
    
    private boolean addSerial(String position, String serial){
            this.updateSavedState(false);
            DefaultTableModel model = (DefaultTableModel) this.serialsTable.getModel();
            model.addRow(new Object[]{Integer.parseInt(position),serial});
            this.serialEntries.add(serial);
            //this.updateSerialCounter(1);
            this.serialEntry_tf.setText(null);
            //scroll table to bottom
            this.serialsTable.scrollRectToVisible(this.serialsTable.getCellRect(this.serialsTable.getRowCount()-1, 0, true));
            return true;
    }
    
    public void updateSerialCounter(int update){
        this.serialCount += update;
        this.serialCount_lbl_data.setText(""+this.serialCount);
        this.checkNewBox();
        
    }
    
    /*
     * Function: focusTf
     * Purpose: sets the focus on the label title text field on window load and every time 
     * new label is called and also repopulates the default 'hint' text
     */
    public void focusTf(){
        this.label_title_tf.requestFocusInWindow();
        this.label_title_tf.setText(HINT_TEXT);
        this.label_title_tf.selectAll();
    }
    
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                GUI gui = new GUI();        //create an instance of a GUI
                BufferedImage image = null; //image object to hold favicon image
                
               try{                         //set the icon in the upper left corner
                   image = ImageIO.read(gui.getClass().getResource("unixfavicon.png")); 
                }
                catch(IOException e){
                    System.err.println("Error file not found");
                    e.printStackTrace();
                }
               gui.setIconImage(image);
               gui.focusTf();        //focus to the title field on program entry
               gui.setVisible(true); //set the gui visible
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel boxCount_lbl_data;
    private javax.swing.JButton clear_btn;
    private javax.swing.JLabel count_lbl;
    private javax.swing.JPanel display_panel;
    private javax.swing.JButton email_btn;
    private javax.swing.JMenu file_menu;
    private javax.swing.JPanel footer_panel;
    private javax.swing.JLabel headerNumber_lbl;
    private javax.swing.JPanel header_panel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelTitle_lbl;
    private javax.swing.JTextField label_title_tf;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField model_number_tf;
    private javax.swing.JButton newLabel_btn;
    private javax.swing.JMenuItem newLabel_menuItem;
    private javax.swing.JButton open_btn;
    private javax.swing.JMenuItem open_menuItem;
    private javax.swing.JButton printLabel_btn;
    private javax.swing.JMenuItem print_menu_item;
    private javax.swing.JButton serialAdd_btn;
    private javax.swing.JLabel serialCount_lbl_data;
    private javax.swing.JTextField serialEntry_tf;
    private javax.swing.JLabel serial_lbl;
    private javax.swing.JTable serialsTable;
    private javax.swing.JLabel unitsPerCase_lbl;
    private javax.swing.JTextField unitsPerCase_tf;
    // End of variables declaration//GEN-END:variables
    
}

